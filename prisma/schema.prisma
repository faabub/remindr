// ./prisma/schema.prisma

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  groups        UserGroup[]
}

model UserGroup {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  reminders Reminder[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userGroups UserGroup[]
}

model Reminder {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  color       String
  dueDate     DateTime
  photoUrl    String?
  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
